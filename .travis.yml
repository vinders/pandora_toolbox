os: linux
language: cpp
sudo: require
git:
  depth: false

env:
  global:
    - CODECOV_TOKEN="975b9113-5c8b-445f-919c-c76ceb46388a"
    - COVERAGE_DIR="_coverage"
    - MAKEFLAGS=-j4

notifications:
  email:
    on_success: never
    on_failure: never

jobs:
  fast_finish: true
  include:
    # linux/X11 - clang9 - x86_64
    - &Linux-clang9
      branches:
        only:
          - develop
      if: branch = develop
      os: linux
      dist: bionic
      name: "Linux-Xorg: clang"
      services:
        - xvfb
      language: cpp
      compiler: clang
      env:
        - CC=clang-9
        - CXX=clang++-9
        - PLATFORM_NAME=linux-clang
        - BUILD_TYPE=Debug
        - ENABLE_VULKAN=OFF
        - ENABLE_XVFB=ON
        - GENERATOR="Unix Makefiles"
        - CMAKE_ARGS="-DCWORK_TESTS=ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-bionic-9
          packages:
            - clang-9
            - libc++-8-dev
            - libc++abi-8-dev
            - libasound2-dev
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
            - libxext-dev
            - xorg-dev
            - libgl1-mesa-dev
            - libglu1-mesa-dev
            - python3.5
    # linux/X11 - gcc9 - x86_64
    - &Linux-gcc
      branches:
        only:
          - master
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      if: branch != develop OR fork = true
      os: linux
      dist: bionic
      name: "Linux-Xorg: gcc (release)"
      services:
        - xvfb
      language: cpp
      compiler: gcc
      env:
        - CC=gcc-9
        - CXX=g++-9
        - PLATFORM_NAME=linux-gcc
        - BUILD_TYPE=Release
        - ENABLE_VULKAN=ON
        - ENABLE_XVFB=ON
        - GENERATOR="Unix Makefiles"
        - CMAKE_ARGS="-DCWORK_TESTS=ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-9
            - g++-9
            - libasound2-dev
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
            - libxext-dev
            - xorg-dev
            - libgl1-mesa-dev
            - libglu1-mesa-dev
            - python3.5
    # linux/X11 - gcc - x86_64 (coverage)
    - &Linux-gcc9-cov
      branches:
        only:
          - develop
      if: branch = develop AND fork = false
      os: linux
      dist: xenial
      name: "Linux-Xorg: gcc (coverage)"
      services:
        - xvfb
      language: cpp
      compiler: gcc
      env:
        - CC=gcc-7
        - CXX=g++-7
        - PLATFORM_NAME=linux-gcc
        - BUILD_TYPE=Debug
        - ENABLE_COVERAGE=ON
        - ENABLE_VULKAN=ON
        - ENABLE_XVFB=ON
        - GENERATOR="Unix Makefiles"
        - CMAKE_ARGS="-DCWORK_TESTS=ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-7
            - g++-7
            - libasound2-dev
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
            - libxext-dev
            - xorg-dev
            - libgl1-mesa-dev
            - libglu1-mesa-dev
            - python3.5
    # linux/X11 - gcc5 - x86_64 (C++14)
    - &Linux-gcc5
      branches:
        only:
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      if: branch != master
      os: linux
      dist: trusty
      name: "Linux-Xorg: gcc-5 (cpp14)"
      services:
        - xvfb
      language: cpp
      compiler: gcc
      env:
        - CC=gcc-5
        - CXX=g++-5
        - PLATFORM_NAME=linux-gcc5
        - BUILD_TYPE=Debug
        - ENABLE_VULKAN=OFF
        - ENABLE_XVFB=ON
        - GENERATOR="Unix Makefiles"
        - CMAKE_ARGS="-DCWORK_CPP_REVISION=14 -DCWORK_TOOLS=OFF -DCWORK_TESTS=ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc-5
            - g++-5
            - libasound2-dev
            - libxrandr-dev
            - libxinerama-dev
            - libxcursor-dev
            - libxi-dev
            - libxext-dev
            - xorg-dev
            - libgl1-mesa-dev
            - libglu1-mesa-dev
            - python3.5
    # linux/wayland - gcc9 - x86_64
    - &Linux-gcc
      branches:
        only:
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      if: branch != master
      os: linux
      dist: focal
      name: "Linux-Wayland: gcc"
      language: cpp
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - PLATFORM_NAME=linux-gcc
        - BUILD_TYPE=Release
        - ENABLE_VULKAN=OFF
        - GENERATOR="Unix Makefiles"
        - IGNORE_TESTS=ON
        - CMAKE_ARGS="-DCWORK_TESTS=ON -DCWORK_LINUX_WAYLAND=ON"
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - gcc
            - g++
            - libasound2-dev
            - wayland-protocols
            - libwayland-dev
            - libxkbcommon-dev
            - libegl1-mesa-dev
            - python3.5
    # macOS - clang - x86_64
    - &MacOS-clang
      branches:
        only:
          - master
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      os: osx
      name: "MacOS X: clang"
      language: cpp
      compiler: clang
      env:
        - CC=clang
        - CXX=clang++
        - PLATFORM_NAME=osx
        - BUILD_TYPE=Release
        - ENABLE_VULKAN=ON
        - GENERATOR="Unix Makefiles"
        - CMAKE_ARGS="-DCWORK_TESTS=ON"
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-7
          packages:
            - libasound2-dev
            - python3.5
    # iOS - xcode - arm64
    - &iOS
      branches:
        only:
          - master
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      os: osx
      name: "iOS: cross-compiled (xcode/MacOS)"
      language: cpp
      compiler: clang
      env:
        - PLATFORM_NAME=ios
        - BUILD_TYPE=Release
        - ENABLE_VULKAN=OFF
        - GENERATOR=Xcode
        - CMAKE_ARGS="-DCWORK_TESTS=OFF -DCWORK_TOOLS=OFF -DCWORK_CPP_REVISION=14 -DCWORK_DUMMY_SOURCES=ON"
        - CMAKE_PLATFORM_ARGS="-DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_ARCHITECTURES=armv7;armv7s;arm64;i386;x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.3 -DCMAKE_INSTALL_PREFIX=`pwd`/_install -DCMAKE_XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH=NO -DCMAKE_IOS_INSTALL_COMBINED=YES"
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-7
          packages:
            - libasound2-dev
            - python3.5
    # android - NDK - arm64
    - &Android64
      branches:
        only:
          - master
          - develop
          - /^release.*$/
          - /^feat.*$/
          - /^fix.*$/
          - /^test.*$/
      os: linux
      dist: xenial
      name: "Android: cross-compiled (ndk/Linux)"
      language: android
      env:
        - PLATFORM_NAME=android64
        - BUILD_TYPE=Release
        - ENABLE_VULKAN=ON
        - GENERATOR=Ninja
        - CMAKE_ARGS="-DCWORK_TESTS=OFF -DCWORK_CPP_REVISION=14 -DCWORK_DUMMY_SOURCES=ON"
        - ANDROID_TARGET=android-26
        - ANDROID_TARGET_VERSION=26
        - ANDROID_ABI=arm64-v8a
        - ANDROID_ARCH=arm64
        - ANDROID_NEON=TRUE
      android:
        components:
          - tools
          - tools #see https://github.com/travis-ci/travis-ci/issues/6040#issuecomment-219367943)
          - platform-tools
          - extra-android-support
          - extra-android-m2repository
          - extra-google-m2repository
          - build-tools-26.0.3
          - android-26
      addons:
        apt:
          packages:
            - python3.5
            - ninja-build
            - p7zip-full

before_install:
  - |
    if [ "$PLATFORM_NAME" = "android64" ]; then
      export ANDROID_HOME=/usr/local/android-sdk
      export ARCH="$(uname -m)"
      wget "http://dl.google.com/android/repository/android-ndk-r17c-linux-${ARCH}.zip" -O ndk.bin
      7z x ndk.bin > /dev/null
      export ANDROID_NDK_HOME="$(pwd)/android-ndk-r17c"
      export PATH="${ANDROID_HOME}/tools:${ANDROID_HOME}/platform-tools:${ANDROID_NDK_HOME}:$PATH"
      echo "sdk.dir=$ANDROID_HOME" > local.properties
      echo "ndk.dir=$ANDROID_NDK_HOME" >> local.properties
    elif [ "$PLATFORM_NAME" = "ios" ]; then
      OSX_VER="$(sw_vers -productVersion)"
      if [ "${OSX_VER:0:5}" = "10.14" ]; then
        open /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg 
      fi
    fi

before_script:
  # ---- install cmake 3.14 ----
  - sh ./_scripts/ci/install_cmake.sh 3.14.7 3.14 _addons
  - sudo chmod -R 777 "./_addons"
  - sudo chmod -R 777 "./video"
  - PATH=$(pwd)/_addons/cmake_3.14.7:$(pwd)/_addons/cmake_3.14.7/bin:$PATH
  - export CTEST_OUTPUT_ON_FAILURE=1
  # ---- install libs / toolchain ----
  - |
    if [ "$PLATFORM_NAME" = "android64" ]; then
      python3 "${ANDROID_NDK_HOME}/build/tools/make_standalone_toolchain.py" --arch arm64 --install-dir "${HOME}/arm_toolchain"
      export PATH=$HOME/arm_toolchain:$HOME/arm_toolchain/bin:$PATH
      export TOOLCHAIN_PATH=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake
    else
      sh ./_scripts/ci/install_opengl.sh
      if [ "$ENABLE_VULKAN" = "ON___CURRENTLY_DISABLED" ]; then
        sh ./_scripts/ci/install_vulkan.sh 1.2.154.0
        if [ "$PLATFORM_NAME" = "osx" ]; then
          export VULKAN_SDK=/usr/local
        else
          export VULKAN_SDK=$TRAVIS_BUILD_DIR/_libs/VulkanSDK/1.2.154.0/x86_64
        fi
      fi
    fi
  - cmake --version
  # ---- project dependencies ----
  - sh ./_scripts/ci/install_dependencies.sh "${PLATFORM_NAME}"

script:
  # ---- project version + build directory ----
  - sh ./_scripts/update_version.sh
  - mkdir _build && cd ./_build && mkdir "${PLATFORM_NAME}" && cd ..
  # ---- cmake generation ----
  - |
    if [ "$PLATFORM_NAME" = "android64" ]; then
      cmake -S . -B "./_build/${PLATFORM_NAME}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" $CMAKE_ARGS \
        -G Ninja \
        -DANDROID_ABI=$ANDROID_ABI \
        -DANDROID_ARM_NEON=$ANDROID_NEON \
        -DANDROID_PLATFORM=$ANDROID_TARGET \
        -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_PATH \
        -DANDROID_TOOLCHAIN=clang \
        -DCMAKE_SYSTEM_NAME=Android \
        -DCMAKE_ANDROID_STANDALONE_TOOLCHAIN=$TOOLCHAIN_PATH \
        -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN_PATH \
        -DCMAKE_ANDROID_API=$ANDROID_TARGET_VERSION \
        -DCMAKE_ANDROID_ARCH_ABI=$ANDROID_ABI \
        -DCMAKE_EXE_LINKER_FLAGS="-pie" \
        -DCMAKE_ANDROID_ARM_NEON=$ANDROID_NEON \
        || exit 1
    else
      if [ "$ENABLE_COVERAGE" = "ON" ]; then
        CMAKE_ARGS="${CMAKE_ARGS} -DCWORK_COVERAGE=1"
      fi
      if [ -n "$CMAKE_PLATFORM_ARGS" ]; then
        CMAKE_ARGS="${CMAKE_ARGS} ${CMAKE_PLATFORM_ARGS}"
      fi
      cmake -G "${GENERATOR}" -S . -B "./_build/${PLATFORM_NAME}" -DCMAKE_BUILD_TYPE="${BUILD_TYPE}" $CMAKE_ARGS || exit 1
    fi
  # ---- cmake build / unit testing ----
  - |
    if [ "$PLATFORM_NAME" = "android64" ]; then
      cd "./_build/${PLATFORM_NAME}"
      ninja -j4 || exit 1
    elif [ "$PLATFORM_NAME" = "ios" ]; then
      cmake --build "./_build/${PLATFORM_NAME}" --config $BUILD_TYPE --target install || exit 1
    else
      cd "./_build/${PLATFORM_NAME}"
      make -j4 || exit 1
      if [ "$IGNORE_TESTS" = "ON" ]; then
        echo "-- Tests not executed on current build --"
      elif [ "$ENABLE_XVFB" = "ON" ]; then
        xvfb-run --auto-servernum --server-num=1 --server-args="-screen 0 1024x768x24" make test || exit 1
      else
        make test || exit 1
      fi
      cd ../..
    fi

# ---- coverage ----
after_success: |
  if [ "$ENABLE_COVERAGE" = "ON" ]; then
    bash <(curl -s https://codecov.io/bash) -R . -t $CODECOV_TOKEN || echo "Codecov did not collect coverage reports"
  fi
